services:
  traefik:
    image: traefik:latest
    container_name: bookingsys-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.email=certificate@bookingsystem.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/acme.json:/letsencrypt/acme.json"
    networks:
      - web

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: bookingsys-app
    container_name: bookingsys-app
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - vendor:/var/www/html/vendor
    networks:
      - web
    entrypoint: ["sh", "./docker/entrypoint.sh"]
    depends_on:
      - redis
      - postgres

  nginx:
    image: nginx:alpine
    container_name: bookingsys-nginx
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - .:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.laravel.rule=Host(`robust-distinctly-manatee.ngrok-free.app`) || Host(`erplsc.duckdns.org`)"
      - "traefik.http.routers.laravel.entrypoints=websecure"
      - "traefik.http.routers.laravel.tls.certresolver=letsencrypt"
      - "traefik.http.services.laravel.loadbalancer.server.port=80"
      - "traefik.http.routers.laravel.middlewares=https-header@docker"
      - "traefik.http.middlewares.https-header.headers.customrequestheaders.X-Forwarded-Proto=https"

  queue:
    image: bookingsys-app
    container_name: bookingsys-queue
    restart: unless-stopped
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    env_file:
      - .env
    depends_on:
      - app
      - redis
      - postgres
    networks:
      - web

  postgres:
    image: postgres:latest
    container_name: bookingsys-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - web

  redis:
    image: redis:latest
    container_name: bookingsys-redis
    restart: unless-stopped
    networks:
      - web

volumes:
  pgdata:
  vendor:

networks:
  web:
    driver: bridge
